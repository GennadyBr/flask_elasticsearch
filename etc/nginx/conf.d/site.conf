# server отвечает за виртуальный сервер.
# Сам по себе виртуальный сервер — это порты из директивы listen,
# на которые приходят соединения и имена хостов через заголовок Host.
# Их принимает этот виртуальный сервер

server {
    listen       82 default_server;
    listen       [::]:82 default_server;
    server_name  _;  # «Пустое» имя (_ или отсутствие имени).
# Для примера мы использовали как раз «пустое» имя, чтобы не смотреть на заголовок Host.
# Однако, такой подход бывает полезен, особенно если нужно проксировать через Nginx несколько разных сайтов,
# но при этом слушать соединения на одном порту.

    root /data;
# указание корневой папки, в которой нужно смотреть статический контент.
# задаёт путь до папки в ОС, на которой работает Nginx.
        # любой запрос приходит в location /, начинается проверка, есть ли по пути /data в файловой системе нужный файл
        # Если его нет, вызывается сайт по адресу http://service:8000.
        # Такое поведение позволяет сначала проверять статический контент и только потом — сторону сайта.

    location /static/ {
        alias /opt/my_app/static/;
    }

    location / {
    # location, который начинается с символа @ называется именованным.
    # Такие локейшены используются для перенаправления в него запросов
        proxy_pass http://app_2:5002;
        # proxy_pass говорит, по какому адресу отправлять запросы по location
        # — это называется обратное проксирование (реверс-проксирование).
        # Внутри можно передать либо unix-сокет, либо http.
        # Лучше использовать http, так как работать с ним проще,
        # его легче отследить через netstat и не вылезут внезапные ошибки.
    }

    location /search {
        proxy_pass http://app_2:5002;
    }

    location /elastic {
        proxy_pass http://elastic_2:9202;
    }

    location /kibana {
        proxy_pass http://kibana_2:5602;
    }

    location ~* \.(?:jpg|jpeg|gif|png|ico|css|js)$ {
    # Проверка регистроНЕзависимых регулярных выражений в порядке следования в конфиге
        log_not_found off;
        expires 90d;
    }

####### исправил location / на location /admin и location /api ######
    location /admin {
    # Совпадает с URI всех запросов, т.к. они все начинаются с "/"
    # Но! Если будут найдены соответствия в расположениях
    # с регулярными выражениями или с другим более длинным
    # строковым литералом (например, "/data/"),
    # то конфигурация для "/" не будет применена.
        try_files $uri @backend;
        # try_files можно ограничивать доступ.
        # В текущей конфигурации запрос http://127.0.0.1/ отдаст 403 ошибку,
        # так как идёт попытка получить доступ в закрытую секцию файловой системы
    }

    location /api {
        try_files $uri @backend;
    }

    error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
}