worker_processes  1;  # для запуска в докер контейнере и для масштабирования


# конфигурация обработки соединений.
# Для вашей админки максимально можно поднять от 512 до 1024 количество соединений с сервером.
# Но обычно такая настройка требуется, когда нагрузка становится выше
events {
    worker_connections  1024;
}

# основная часть конфигурации, отвечающая за обработку HTTP-запросов
# mime.types - задаёт все доступные типы данных, которые обычно приходят в заголовке Content-Type
# log_format  main - формат логгирования, который будет отображаться в логах.
# В Nginx через $ задаются встроенные переменные
# sendfile - убирает дополнительное копирование при передаче файлов статики или пользовательского контента'
# и избавляет от вызова методов формата read+write
# tcp_nodelay и tcp_nopush,- отвечают за отправку заголовков и начала файлов в рамках одного tcp-пакета.
# Такая комбинация из трёх флагов позволит Nginx:
# определить перед отправкой клиенту, что все TCP-пакеты полностью заполнены информацией;
# сбросить флаг tcp_nopush для последнего пакета, чтобы отправить его сразу же.
# client_max_body_size. - нужна только для одного случая: разрешить загрузку в одном запросе множества данных.
# Это полезно для файлов, картинок и документов, которые пользователь может грузить в файловое хранилище.
# Это пригодится для загрузки картинок к фильмам или трейлеров, которые могут весить около 100-200 Мб
# gzip on;- включает сжатие. (выключена по умолчанию)
# gzip_comp_level - степень сжатия директивой от 1 (быстрое и лёгкое сжатие) до 9 (максимальное сжатие, которое нагружает процессор).
# нет необходимости ставить значение выше 3–4, так как большее сжатие обычно не приносит значимого повышения эффективности.
# gzip_min_length 1000 - минимальное значение в байтах, после которого уже нужно применять сжатие
# gzip_types - какой контент нужно сжимать

http {
    include       mime.types;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile        on;
    tcp_nodelay     on;
    tcp_nopush      on;

    server_tokens off; #nginx скроет информацию о типе и версии Web-сервера на страницах, генерируемых в ответ на ошибочный запрос клиента

    client_max_body_size 8m;  # Для загрузки контента на сервак

    gzip on;  # снижаем нагрузку на сеть
    gzip_min_length 1000;
    gzip_types
        text/plain
        text/css
        application/json
        application/x-javascript
        text/xml
        text/javascript;

    proxy_redirect     off;
    proxy_set_header   Host             $host;
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;

    set_real_ip_from  192.168.1.0/24;
    real_ip_header    X-Forwarded-For;

    include conf.d/*.conf;

}

# proxy_redirect - для перенаправления запроса на другой хост.
# В вашем случае отключаем все перенаправления, так как они нам не нужны.
# proxy_set_header устанавливает заголовки в соответствии с переменными.
# Nginx любезно предоставляет необходимые переменные, которые и используются для установки значений в уже известные заголовки

